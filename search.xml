<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础概念与常识</title>
      <link href="/2024/05/10/Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/"/>
      <url>/2024/05/10/Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Java语言有哪些特点？"><a href="#Java语言有哪些特点？" class="headerlink" title="Java语言有哪些特点？"></a>Java语言有哪些特点？</h2><ol><li><p>简单易学（语法简单，上手容易）；</p></li><li><p>面向对象（封装，继承，多态）；</p></li><li><p>平台无关性（ Java 虚拟机实现平台无关性）；</p></li><li><p>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</p></li><li><p>可靠性（具备异常处理和自动内存管理机制）；</p></li><li><p>安全性（Java 语言本身的设计就提供了多重安全防护机制如访问权限修饰符、限制程序直接访问操作系统资源）；</p></li><li><p>高效性（通过 Just In Time 编译器等技术的优化，Java 语言的运行效率还是非常不错的）；</p></li><li><p>支持网络编程并且很方便；</p></li><li><p>编译与解释并存。</p></li></ol><h2 id="Java-SE、Java-EE、Java-ME"><a href="#Java-SE、Java-EE、Java-ME" class="headerlink" title="Java SE、Java EE、Java ME"></a>Java SE、Java EE、Java ME</h2><ol><li><p>Java SE（Java Platform，Standard Edition）: Java 平台标准版，Java 编程语言的基础，它包含了支持 Java 应用程序开发和运行的核心类库以及虚拟机等核心组件。Java SE 可以用于构建桌面应用程序或简单的服务器应用程序。</p></li><li><p>Java EE（Java Platform, Enterprise Edition ）：Java 平台企业版，建立在 Java SE 的基础上，包含了支持企业级应用程序开发和部署的标准和规范（比如 Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS）。 Java EE 可以用于构建分布式、可移植、健壮、可伸缩和安全的服务端 Java 应用程序，例如 Web 应用程序。</p></li></ol><p>简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本。Java SE 更适合开发桌面应用程序或简单的服务器应用程序，Java EE 更适合开发复杂的企业级应用程序或 Web 应用程序。</p><ol start="3"><li>除了 Java SE 和 Java EE，还有一个 Java ME（Java Platform，Micro Edition）。Java ME 是 Java 的微型版本，主要用于开发嵌入式消费电子设备的应用程序，例如手机、PDA、机顶盒、冰箱、空调等。Java ME 无需重点关注，知道有这个东西就好了，现在已经用不上了。</li></ol><h2 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h2><ol><li><p>JDK（Java Development Kit），它是功能齐全的 Java SDK，是提供给开发者使用，能够创建和编译 Java 程序的开发套件。它包含了 <strong>JRE</strong>，同时还包含了编译 java 源码的编译器<strong>javac</strong> 以及一些其他工具比如 javadoc（文档注释工具）、<strong>jdb</strong>（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。</p></li><li><p>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括<strong>Java 虚拟机</strong>（JVM）、Java <strong>基础类库</strong>（Class Library）。</p></li><li><p>JVM（Java Virtual Machine）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p></li></ol><h2 id="什么是字节码？字节码的好处？"><a href="#什么是字节码？字节码的好处？" class="headerlink" title="什么是字节码？字节码的好处？"></a>什么是字节码？字节码的好处？</h2><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C、 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p><p><strong>Java 程序从源代码到运行的过程如下图所示</strong>：</p><p><img src="/images/%E5%AD%97%E8%8A%82%E7%A0%81%E6%9C%BA%E5%99%A8%E7%A0%81.png"></p><h2 id="为什么说Java语言”编译与解释并存“？"><a href="#为什么说Java语言”编译与解释并存“？" class="headerlink" title="为什么说Java语言”编译与解释并存“？"></a>为什么说Java语言”编译与解释并存“？</h2><p><strong>编译型</strong>：编译型语言open in new window 会通过编译器open in new window将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</p><p><strong>解释型</strong>：解释型语言open in new window会通过解释器open in new window一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</p><p><img src="/images/%E7%BC%96%E8%AF%91%E8%A7%A3%E9%87%8A.png"></p><p><strong>为什么说 Java 语言“编译与解释并存”？</strong></p><p>这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件），这种字节码必须由 Java 解释器来解释执行。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
